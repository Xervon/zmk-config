// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define B_NUM(key) B_LAYER(num, key)

/ {
    keymap {
        num {
            bindings = <
        // ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
        // │              |  7           |  8           |  9           |  +-          │   │              │              │              │              │              │
             &none          B_NUM(N7)      B_NUM(N8)      B_NUM(N9)      B_NUM(point)       &none          &none          &none          &none          &none
        // ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        // │              |  4           |  5           |  6           |  */          │   │              │  SHIFT       │  CONTROL     |  ALT         |  GUI         │
             &none          B_NUM(N4)      B_NUM(N5)      B_NUM(N6)      B_NUM(line)        &none          MT_SK(RSHFT)   MT_SK(RCTRL)   MT_SK(RALT)    MT_SK(RGUI)
        // ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        // │  .,          |  1           |  2           |  3           |  +           │   │              │              │              │              │              │
             B_NUM(dot)     B_NUM(N1)      B_NUM(N2)      B_NUM(N3)      B_NUM(equal)       &none          &none          &none          &none          &none
        // ╰──────────────┴──────────────┴──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
        //                                              |  SPACE       |  0           |   |              |              |
                                                          &kp SPACE      B_NUM(N0)          &trans         &none
        //                                              ╰──────────────┴──────────────╯   ╰──────────────┴──────────────╯
            >;
        };
    };

    behaviors {
        layers {
            num {
                N0 {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_N0";
                    #binding-cells = <0>;
                    bindings = <&kp N0>, <&kp F10>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                N1 {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_N1";
                    #binding-cells = <0>;
                    bindings = <&kp N1>, <&kp F1>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                N2 {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_N2";
                    #binding-cells = <0>;
                    bindings = <&kp N2>, <&kp F2>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                N3 {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_N3";
                    #binding-cells = <0>;
                    bindings = <&kp N3>, <&kp F3>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                N4 {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_N4";
                    #binding-cells = <0>;
                    bindings = <&kp N4>, <&kp F4>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                N5 {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_N5";
                    #binding-cells = <0>;
                    bindings = <&kp N5>, <&kp F5>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                N6 {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_N6";
                    #binding-cells = <0>;
                    bindings = <&kp N6>, <&kp F6>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                N7 {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_N7";
                    #binding-cells = <0>;
                    bindings = <&kp N7>, <&kp F7>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                N8 {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_N8";
                    #binding-cells = <0>;
                    bindings = <&kp N8>, <&kp F8>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                N9 {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_N9";
                    #binding-cells = <0>;
                    bindings = <&kp N9>, <&kp F9>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                line {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_POINT";
                    #binding-cells = <0>;
                    bindings = <&kp PLUS>, <&kp MINUS>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                point {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_POINT";
                    #binding-cells = <0>;
                    bindings = <&kp ASTERISK>, <&kp SLASH>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                equal {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_POINT";
                    #binding-cells = <0>;
                    bindings = <&kp EQUAL>, <&none>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                dot {
                    compatible = "zmk,behavior-mod-morph";
                    label = "num_DOT";
                    #binding-cells = <0>;
                    bindings = <&kp DOT>, <&kp COMMA>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };
            };
        };
    };
};
